// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KVRaft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KVRaft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KVRaft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KVRaft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KVRaft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KVRaft_2eproto;
namespace kvraft {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class InstallSnapshotRequest;
class InstallSnapshotRequestDefaultTypeInternal;
extern InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponse;
class InstallSnapshotResponseDefaultTypeInternal;
extern InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace kvraft
PROTOBUF_NAMESPACE_OPEN
template<> ::kvraft::AppendEntriesRequest* Arena::CreateMaybeMessage<::kvraft::AppendEntriesRequest>(Arena*);
template<> ::kvraft::AppendEntriesResponse* Arena::CreateMaybeMessage<::kvraft::AppendEntriesResponse>(Arena*);
template<> ::kvraft::Command* Arena::CreateMaybeMessage<::kvraft::Command>(Arena*);
template<> ::kvraft::InstallSnapshotRequest* Arena::CreateMaybeMessage<::kvraft::InstallSnapshotRequest>(Arena*);
template<> ::kvraft::InstallSnapshotResponse* Arena::CreateMaybeMessage<::kvraft::InstallSnapshotResponse>(Arena*);
template<> ::kvraft::LogEntry* Arena::CreateMaybeMessage<::kvraft::LogEntry>(Arena*);
template<> ::kvraft::RequestVoteRequest* Arena::CreateMaybeMessage<::kvraft::RequestVoteRequest>(Arena*);
template<> ::kvraft::RequestVoteResponse* Arena::CreateMaybeMessage<::kvraft::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kvraft {

// ===================================================================

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kClientidFieldNumber = 4,
    kRequestidFieldNumber = 5,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes clientid = 4;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int64 requestid = 5;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // .kvraft.Command command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::kvraft::Command& command() const;
  ::kvraft::Command* release_command();
  ::kvraft::Command* mutable_command();
  void set_allocated_command(::kvraft::Command* command);
  private:
  const ::kvraft::Command& _internal_command() const;
  ::kvraft::Command* _internal_mutable_command();
  public:

  // int64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.LogEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvraft::Command* command_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.AppendEntriesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntriesFieldNumber = 5,
    kLeaderidFieldNumber = 2,
    kTermFieldNumber = 1,
    kPreLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
  };
  // repeated .kvraft.LogEntry logEntries = 5;
  int logentries_size() const;
  private:
  int _internal_logentries_size() const;
  public:
  void clear_logentries();
  ::kvraft::LogEntry* mutable_logentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvraft::LogEntry >*
      mutable_logentries();
  private:
  const ::kvraft::LogEntry& _internal_logentries(int index) const;
  ::kvraft::LogEntry* _internal_add_logentries();
  public:
  const ::kvraft::LogEntry& logentries(int index) const;
  ::kvraft::LogEntry* add_logentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvraft::LogEntry >&
      logentries() const;

  // string leaderid = 2;
  void clear_leaderid();
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 preLogIndex = 3;
  void clear_prelogindex();
  ::PROTOBUF_NAMESPACE_ID::int64 prelogindex() const;
  void set_prelogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prelogindex() const;
  void _internal_set_prelogindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 prevLogTerm = 4;
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.AppendEntriesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvraft::LogEntry > logentries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 prelogindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 prevlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.AppendEntriesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kFastbackFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fastback = 3;
  void clear_fastback();
  ::PROTOBUF_NAMESPACE_ID::int64 fastback() const;
  void set_fastback(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fastback() const;
  void _internal_set_fastback(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.AppendEntriesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 fastback_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.InstallSnapshotRequest) */ {
 public:
  InstallSnapshotRequest();
  virtual ~InstallSnapshotRequest();

  InstallSnapshotRequest(const InstallSnapshotRequest& from);
  InstallSnapshotRequest(InstallSnapshotRequest&& from) noexcept
    : InstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotRequest& operator=(InstallSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRequest*>(
               &_InstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InstallSnapshotRequest& a, InstallSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotRequest* New() const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(nullptr);
  }

  InstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotRequest& from);
  void MergeFrom(const InstallSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.InstallSnapshotRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderidFieldNumber = 2,
    kLastIncludeIndexFieldNumber = 3,
    kLastIncludeTermFieldNumber = 4,
    kOffsetFieldNumber = 6,
    kDoneFieldNumber = 7,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leaderid = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int64 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lastIncludeIndex = 3;
  void clear_lastincludeindex();
  ::PROTOBUF_NAMESPACE_ID::int64 lastincludeindex() const;
  void set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastincludeindex() const;
  void _internal_set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lastIncludeTerm = 4;
  void clear_lastincludeterm();
  ::PROTOBUF_NAMESPACE_ID::int64 lastincludeterm() const;
  void set_lastincludeterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastincludeterm() const;
  void _internal_set_lastincludeterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 6;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool done = 7;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.InstallSnapshotRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastincludeindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastincludeterm_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.InstallSnapshotResponse) */ {
 public:
  InstallSnapshotResponse();
  virtual ~InstallSnapshotResponse();

  InstallSnapshotResponse(const InstallSnapshotResponse& from);
  InstallSnapshotResponse(InstallSnapshotResponse&& from) noexcept
    : InstallSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResponse& operator=(const InstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotResponse& operator=(InstallSnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResponse*>(
               &_InstallSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstallSnapshotResponse& a, InstallSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotResponse* New() const final {
    return CreateMaybeMessage<InstallSnapshotResponse>(nullptr);
  }

  InstallSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotResponse& from);
  void MergeFrom(const InstallSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.InstallSnapshotResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
  };
  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.InstallSnapshotResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.RequestVoteRequest) */ {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.RequestVoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateidFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kTermFieldNumber = 1,
    kLastLogTermFieldNumber = 4,
  };
  // bytes candidateid = 2;
  void clear_candidateid();
  const std::string& candidateid() const;
  void set_candidateid(const std::string& value);
  void set_candidateid(std::string&& value);
  void set_candidateid(const char* value);
  void set_candidateid(const void* value, size_t size);
  std::string* mutable_candidateid();
  std::string* release_candidateid();
  void set_allocated_candidateid(std::string* candidateid);
  private:
  const std::string& _internal_candidateid() const;
  void _internal_set_candidateid(const std::string& value);
  std::string* _internal_mutable_candidateid();
  public:

  // string lastLogIndex = 3;
  void clear_lastlogindex();
  const std::string& lastlogindex() const;
  void set_lastlogindex(const std::string& value);
  void set_lastlogindex(std::string&& value);
  void set_lastlogindex(const char* value);
  void set_lastlogindex(const char* value, size_t size);
  std::string* mutable_lastlogindex();
  std::string* release_lastlogindex();
  void set_allocated_lastlogindex(std::string* lastlogindex);
  private:
  const std::string& _internal_lastlogindex() const;
  void _internal_set_lastlogindex(const std::string& value);
  std::string* _internal_mutable_lastlogindex();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lastLogTerm = 4;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.RequestVoteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidateid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvraft.RequestVoteResponse) */ {
 public:
  RequestVoteResponse();
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvraft.RequestVoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KVRaft_2eproto);
    return ::descriptor_table_KVRaft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool VoteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvraft.RequestVoteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KVRaft_2eproto;
};
// ===================================================================

class KVRaftRPC_Stub;

class KVRaftRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KVRaftRPC() {};
 public:
  virtual ~KVRaftRPC();

  typedef KVRaftRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::AppendEntriesRequest* request,
                       ::kvraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::RequestVoteRequest* request,
                       ::kvraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::InstallSnapshotRequest* request,
                       ::kvraft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVRaftRPC);
};

class KVRaftRPC_Stub : public KVRaftRPC {
 public:
  KVRaftRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KVRaftRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KVRaftRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KVRaftRPC ------------------------------------------

  void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::AppendEntriesRequest* request,
                       ::kvraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::RequestVoteRequest* request,
                       ::kvraft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kvraft::InstallSnapshotRequest* request,
                       ::kvraft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVRaftRPC_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// bytes type = 1;
inline void Command::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::type() const {
  // @@protoc_insertion_point(field_get:kvraft.Command.type)
  return _internal_type();
}
inline void Command::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kvraft.Command.type)
}
inline std::string* Command::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kvraft.Command.type)
  return _internal_mutable_type();
}
inline const std::string& Command::_internal_type() const {
  return type_.GetNoArena();
}
inline void Command::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.Command.type)
}
inline void Command::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Command.type)
}
inline void Command::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Command.type)
}
inline std::string* Command::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_type() {
  // @@protoc_insertion_point(field_release:kvraft.Command.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Command.type)
}

// bytes key = 2;
inline void Command::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::key() const {
  // @@protoc_insertion_point(field_get:kvraft.Command.key)
  return _internal_key();
}
inline void Command::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvraft.Command.key)
}
inline std::string* Command::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvraft.Command.key)
  return _internal_mutable_key();
}
inline const std::string& Command::_internal_key() const {
  return key_.GetNoArena();
}
inline void Command::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.Command.key)
}
inline void Command::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Command.key)
}
inline void Command::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Command.key)
}
inline std::string* Command::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_key() {
  // @@protoc_insertion_point(field_release:kvraft.Command.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Command.key)
}

// bytes value = 3;
inline void Command::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::value() const {
  // @@protoc_insertion_point(field_get:kvraft.Command.value)
  return _internal_value();
}
inline void Command::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvraft.Command.value)
}
inline std::string* Command::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvraft.Command.value)
  return _internal_mutable_value();
}
inline const std::string& Command::_internal_value() const {
  return value_.GetNoArena();
}
inline void Command::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.Command.value)
}
inline void Command::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Command.value)
}
inline void Command::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Command.value)
}
inline std::string* Command::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_value() {
  // @@protoc_insertion_point(field_release:kvraft.Command.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Command.value)
}

// bytes clientid = 4;
inline void Command::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::clientid() const {
  // @@protoc_insertion_point(field_get:kvraft.Command.clientid)
  return _internal_clientid();
}
inline void Command::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:kvraft.Command.clientid)
}
inline std::string* Command::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:kvraft.Command.clientid)
  return _internal_mutable_clientid();
}
inline const std::string& Command::_internal_clientid() const {
  return clientid_.GetNoArena();
}
inline void Command::_internal_set_clientid(const std::string& value) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_clientid(std::string&& value) {
  
  clientid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.Command.clientid)
}
inline void Command::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.Command.clientid)
}
inline void Command::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.Command.clientid)
}
inline std::string* Command::_internal_mutable_clientid() {
  
  return clientid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_clientid() {
  // @@protoc_insertion_point(field_release:kvraft.Command.clientid)
  
  return clientid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:kvraft.Command.clientid)
}

// int64 requestid = 5;
inline void Command::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::requestid() const {
  // @@protoc_insertion_point(field_get:kvraft.Command.requestid)
  return _internal_requestid();
}
inline void Command::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void Command::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:kvraft.Command.requestid)
}

// -------------------------------------------------------------------

// LogEntry

// .kvraft.Command command = 1;
inline bool LogEntry::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool LogEntry::has_command() const {
  return _internal_has_command();
}
inline void LogEntry::clear_command() {
  if (GetArenaNoVirtual() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::kvraft::Command& LogEntry::_internal_command() const {
  const ::kvraft::Command* p = command_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kvraft::Command*>(
      &::kvraft::_Command_default_instance_);
}
inline const ::kvraft::Command& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:kvraft.LogEntry.command)
  return _internal_command();
}
inline ::kvraft::Command* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:kvraft.LogEntry.command)
  
  ::kvraft::Command* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::kvraft::Command* LogEntry::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvraft::Command>(GetArenaNoVirtual());
    command_ = p;
  }
  return command_;
}
inline ::kvraft::Command* LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:kvraft.LogEntry.command)
  return _internal_mutable_command();
}
inline void LogEntry::set_allocated_command(::kvraft::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:kvraft.LogEntry.command)
}

// int64 term = 2;
inline void LogEntry::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:kvraft.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.LogEntry.term)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// int64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesRequest.term)
}

// string leaderid = 2;
inline void AppendEntriesRequest::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesRequest.leaderid)
  return _internal_leaderid();
}
inline void AppendEntriesRequest::set_leaderid(const std::string& value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesRequest.leaderid)
}
inline std::string* AppendEntriesRequest::mutable_leaderid() {
  // @@protoc_insertion_point(field_mutable:kvraft.AppendEntriesRequest.leaderid)
  return _internal_mutable_leaderid();
}
inline const std::string& AppendEntriesRequest::_internal_leaderid() const {
  return leaderid_.GetNoArena();
}
inline void AppendEntriesRequest::_internal_set_leaderid(const std::string& value) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppendEntriesRequest::set_leaderid(std::string&& value) {
  
  leaderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.AppendEntriesRequest.leaderid)
}
inline void AppendEntriesRequest::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.AppendEntriesRequest.leaderid)
}
inline void AppendEntriesRequest::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.AppendEntriesRequest.leaderid)
}
inline std::string* AppendEntriesRequest::_internal_mutable_leaderid() {
  
  return leaderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesRequest::release_leaderid() {
  // @@protoc_insertion_point(field_release:kvraft.AppendEntriesRequest.leaderid)
  
  return leaderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:kvraft.AppendEntriesRequest.leaderid)
}

// int64 preLogIndex = 3;
inline void AppendEntriesRequest::clear_prelogindex() {
  prelogindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_prelogindex() const {
  return prelogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::prelogindex() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesRequest.preLogIndex)
  return _internal_prelogindex();
}
inline void AppendEntriesRequest::_internal_set_prelogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prelogindex_ = value;
}
inline void AppendEntriesRequest::set_prelogindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prelogindex(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesRequest.preLogIndex)
}

// int64 prevLogTerm = 4;
inline void AppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesRequest.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesRequest::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prevlogterm_ = value;
}
inline void AppendEntriesRequest::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesRequest.prevLogTerm)
}

// repeated .kvraft.LogEntry logEntries = 5;
inline int AppendEntriesRequest::_internal_logentries_size() const {
  return logentries_.size();
}
inline int AppendEntriesRequest::logentries_size() const {
  return _internal_logentries_size();
}
inline void AppendEntriesRequest::clear_logentries() {
  logentries_.Clear();
}
inline ::kvraft::LogEntry* AppendEntriesRequest::mutable_logentries(int index) {
  // @@protoc_insertion_point(field_mutable:kvraft.AppendEntriesRequest.logEntries)
  return logentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvraft::LogEntry >*
AppendEntriesRequest::mutable_logentries() {
  // @@protoc_insertion_point(field_mutable_list:kvraft.AppendEntriesRequest.logEntries)
  return &logentries_;
}
inline const ::kvraft::LogEntry& AppendEntriesRequest::_internal_logentries(int index) const {
  return logentries_.Get(index);
}
inline const ::kvraft::LogEntry& AppendEntriesRequest::logentries(int index) const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesRequest.logEntries)
  return _internal_logentries(index);
}
inline ::kvraft::LogEntry* AppendEntriesRequest::_internal_add_logentries() {
  return logentries_.Add();
}
inline ::kvraft::LogEntry* AppendEntriesRequest::add_logentries() {
  // @@protoc_insertion_point(field_add:kvraft.AppendEntriesRequest.logEntries)
  return _internal_add_logentries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvraft::LogEntry >&
AppendEntriesRequest::logentries() const {
  // @@protoc_insertion_point(field_list:kvraft.AppendEntriesRequest.logEntries)
  return logentries_;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// int64 term = 1;
inline void AppendEntriesResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesResponse.term)
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesResponse.success)
}

// int64 fastback = 3;
inline void AppendEntriesResponse::clear_fastback() {
  fastback_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::_internal_fastback() const {
  return fastback_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::fastback() const {
  // @@protoc_insertion_point(field_get:kvraft.AppendEntriesResponse.fastback)
  return _internal_fastback();
}
inline void AppendEntriesResponse::_internal_set_fastback(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fastback_ = value;
}
inline void AppendEntriesResponse::set_fastback(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fastback(value);
  // @@protoc_insertion_point(field_set:kvraft.AppendEntriesResponse.fastback)
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// int64 term = 1;
inline void InstallSnapshotRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.term)
  return _internal_term();
}
inline void InstallSnapshotRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void InstallSnapshotRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.term)
}

// int64 leaderid = 2;
inline void InstallSnapshotRequest::clear_leaderid() {
  leaderid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.leaderid)
  return _internal_leaderid();
}
inline void InstallSnapshotRequest::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leaderid_ = value;
}
inline void InstallSnapshotRequest::set_leaderid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.leaderid)
}

// int64 lastIncludeIndex = 3;
inline void InstallSnapshotRequest::clear_lastincludeindex() {
  lastincludeindex_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::_internal_lastincludeindex() const {
  return lastincludeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::lastincludeindex() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.lastIncludeIndex)
  return _internal_lastincludeindex();
}
inline void InstallSnapshotRequest::_internal_set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastincludeindex_ = value;
}
inline void InstallSnapshotRequest::set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastincludeindex(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.lastIncludeIndex)
}

// int64 lastIncludeTerm = 4;
inline void InstallSnapshotRequest::clear_lastincludeterm() {
  lastincludeterm_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::_internal_lastincludeterm() const {
  return lastincludeterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::lastincludeterm() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.lastIncludeTerm)
  return _internal_lastincludeterm();
}
inline void InstallSnapshotRequest::_internal_set_lastincludeterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastincludeterm_ = value;
}
inline void InstallSnapshotRequest::set_lastincludeterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastincludeterm(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.lastIncludeTerm)
}

// bytes data = 5;
inline void InstallSnapshotRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstallSnapshotRequest::data() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.data)
  return _internal_data();
}
inline void InstallSnapshotRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.data)
}
inline std::string* InstallSnapshotRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:kvraft.InstallSnapshotRequest.data)
  return _internal_mutable_data();
}
inline const std::string& InstallSnapshotRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void InstallSnapshotRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InstallSnapshotRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.InstallSnapshotRequest.data)
}
inline void InstallSnapshotRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.InstallSnapshotRequest.data)
}
inline void InstallSnapshotRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.InstallSnapshotRequest.data)
}
inline std::string* InstallSnapshotRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstallSnapshotRequest::release_data() {
  // @@protoc_insertion_point(field_release:kvraft.InstallSnapshotRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:kvraft.InstallSnapshotRequest.data)
}

// int64 offset = 6;
inline void InstallSnapshotRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::offset() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.offset)
  return _internal_offset();
}
inline void InstallSnapshotRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void InstallSnapshotRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.offset)
}

// bool done = 7;
inline void InstallSnapshotRequest::clear_done() {
  done_ = false;
}
inline bool InstallSnapshotRequest::_internal_done() const {
  return done_;
}
inline bool InstallSnapshotRequest::done() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotRequest.done)
  return _internal_done();
}
inline void InstallSnapshotRequest::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void InstallSnapshotRequest::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotRequest.done)
}

// -------------------------------------------------------------------

// InstallSnapshotResponse

// int64 term = 1;
inline void InstallSnapshotResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotResponse::term() const {
  // @@protoc_insertion_point(field_get:kvraft.InstallSnapshotResponse.term)
  return _internal_term();
}
inline void InstallSnapshotResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void InstallSnapshotResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.InstallSnapshotResponse.term)
}

// -------------------------------------------------------------------

// RequestVoteRequest

// int64 term = 1;
inline void RequestVoteRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteRequest.term)
}

// bytes candidateid = 2;
inline void RequestVoteRequest::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteRequest.candidateid)
  return _internal_candidateid();
}
inline void RequestVoteRequest::set_candidateid(const std::string& value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteRequest.candidateid)
}
inline std::string* RequestVoteRequest::mutable_candidateid() {
  // @@protoc_insertion_point(field_mutable:kvraft.RequestVoteRequest.candidateid)
  return _internal_mutable_candidateid();
}
inline const std::string& RequestVoteRequest::_internal_candidateid() const {
  return candidateid_.GetNoArena();
}
inline void RequestVoteRequest::_internal_set_candidateid(const std::string& value) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestVoteRequest::set_candidateid(std::string&& value) {
  
  candidateid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.RequestVoteRequest.candidateid)
}
inline void RequestVoteRequest::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.RequestVoteRequest.candidateid)
}
inline void RequestVoteRequest::set_candidateid(const void* value, size_t size) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.RequestVoteRequest.candidateid)
}
inline std::string* RequestVoteRequest::_internal_mutable_candidateid() {
  
  return candidateid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteRequest::release_candidateid() {
  // @@protoc_insertion_point(field_release:kvraft.RequestVoteRequest.candidateid)
  
  return candidateid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_candidateid(std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:kvraft.RequestVoteRequest.candidateid)
}

// string lastLogIndex = 3;
inline void RequestVoteRequest::clear_lastlogindex() {
  lastlogindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteRequest.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteRequest::set_lastlogindex(const std::string& value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteRequest.lastLogIndex)
}
inline std::string* RequestVoteRequest::mutable_lastlogindex() {
  // @@protoc_insertion_point(field_mutable:kvraft.RequestVoteRequest.lastLogIndex)
  return _internal_mutable_lastlogindex();
}
inline const std::string& RequestVoteRequest::_internal_lastlogindex() const {
  return lastlogindex_.GetNoArena();
}
inline void RequestVoteRequest::_internal_set_lastlogindex(const std::string& value) {
  
  lastlogindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestVoteRequest::set_lastlogindex(std::string&& value) {
  
  lastlogindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvraft.RequestVoteRequest.lastLogIndex)
}
inline void RequestVoteRequest::set_lastlogindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastlogindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvraft.RequestVoteRequest.lastLogIndex)
}
inline void RequestVoteRequest::set_lastlogindex(const char* value, size_t size) {
  
  lastlogindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvraft.RequestVoteRequest.lastLogIndex)
}
inline std::string* RequestVoteRequest::_internal_mutable_lastlogindex() {
  
  return lastlogindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteRequest::release_lastlogindex() {
  // @@protoc_insertion_point(field_release:kvraft.RequestVoteRequest.lastLogIndex)
  
  return lastlogindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_lastlogindex(std::string* lastlogindex) {
  if (lastlogindex != nullptr) {
    
  } else {
    
  }
  lastlogindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastlogindex);
  // @@protoc_insertion_point(field_set_allocated:kvraft.RequestVoteRequest.lastLogIndex)
}

// int64 lastLogTerm = 4;
inline void RequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteRequest.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteRequest::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteRequest::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteRequest.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// int64 term = 1;
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteResponse.term)
}

// bool VoteGranted = 2;
inline void RequestVoteResponse::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteResponse::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResponse::votegranted() const {
  // @@protoc_insertion_point(field_get:kvraft.RequestVoteResponse.VoteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponse::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteResponse::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:kvraft.RequestVoteResponse.VoteGranted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KVRaft_2eproto
